#!/usr/bin/env python3

import json
import requests
import subprocess
import sys
import os
from datetime import datetime
import argparse

def run_trivy_scan(image_name, output_file):
    """Run Trivy scan and generate JSON report"""
    print(f"üîç Scanning {image_name} with Trivy...")
    
    cmd = [
        "trivy", "image", 
        "--format", "json", 
        "--output", output_file,
        image_name
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print(f"‚úÖ Trivy scan completed: {output_file}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Trivy scan failed: {e}")
        return False

def send_to_ollama(json_data, model="mistral", ollama_url="http://localhost:11434"):
    """Send JSON data to Ollama and get HTML response"""
    print(f"ü§ñ Sending data to Ollama ({model})...")
    
    # Create prompt for HTML generation
    prompt = f"""You are a cybersecurity expert. Analyze this Trivy vulnerability scan JSON report and create a professional HTML security report.

Requirements:
1. Create a complete HTML document with modern CSS styling
2. Include executive summary with key metrics and statistics
3. Categorize vulnerabilities by severity (CRITICAL, HIGH, MEDIUM, LOW)
4. Create a detailed vulnerabilities table with: CVE ID, Package, Severity, Description, Fixed Version
5. Add risk assessment and actionable recommendations
6. Include visual elements like severity badges and progress bars using CSS
7. Make it mobile-responsive and professional-looking
8. Include scan metadata (image name, scan date, total vulnerabilities)
9. Add a severity distribution chart using CSS bars
10. Use modern HTML5 and CSS3 features

JSON Report Data:
{json.dumps(json_data, indent=2)}

Generate only the complete HTML code with embedded CSS, no explanations or markdown formatting."""

    # Prepare request for Ollama
    payload = {
        "model": model,
        "prompt": prompt,
        "stream": False,
        "options": {
            "temperature": 0.1,
            "top_p": 0.9,
            "num_predict": 4000
        }
    }
    
    try:
        response = requests.post(
            f"{ollama_url}/api/generate",
            json=payload,
            timeout=300  # 5 minutes timeout
        )
        response.raise_for_status()
        
        result = response.json()
        html_content = result.get('response', '')
        
        if html_content:
            print("‚úÖ HTML report generated by Ollama")
            return html_content
        else:
            print("‚ùå Empty response from Ollama")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error communicating with Ollama: {e}")
        return None

def save_html_report(html_content, output_file):
    """Save HTML content to file"""
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"‚úÖ HTML report saved: {output_file}")
        return True
    except Exception as e:
        print(f"‚ùå Error saving HTML report: {e}")
        return False

def open_report(html_file):
    """Open HTML report in default browser"""
    try:
        if sys.platform.startswith('linux'):
            subprocess.run(['xdg-open', html_file])
        elif sys.platform.startswith('darwin'):
            subprocess.run(['open', html_file])
        elif sys.platform.startswith('win'):
            os.startfile(html_file)
        else:
            print(f"Please open {html_file} in your web browser")
    except Exception as e:
        print(f"Could not auto-open browser: {e}")
        print(f"Please manually open: {html_file}")

def main():
    parser = argparse.ArgumentParser(description='Generate HTML security report from Trivy JSON using Ollama')
    parser.add_argument('image', help='Docker image name to scan')
    parser.add_argument('--model', default='mistral', help='Ollama model name (default: mistral)')
    parser.add_argument('--ollama-url', default='http://localhost:11434', help='Ollama API URL')
    parser.add_argument('--output-dir', default='./reports', help='Output directory for reports')
    parser.add_argument('--no-open', action='store_true', help='Do not auto-open the HTML report')
    
    args = parser.parse_args()
    
    # Create output directory
    os.makedirs(args.output_dir, exist_ok=True)
    
    # Generate timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # File paths
    json_file = os.path.join(args.output_dir, f"trivy_report_{timestamp}.json")
    html_file = os.path.join(args.output_dir, f"security_report_{timestamp}.html")
    
    print("üõ°Ô∏è  Trivy to Ollama HTML Report Generator")
    print(f"üìä Image: {args.image}")
    print(f"ü§ñ Model: {args.model}")
    print(f"üìÅ Output: {args.output_dir}")
    print("-" * 50)
    
    # Step 1: Run Trivy scan
    if not run_trivy_scan(args.image, json_file):
        sys.exit(1)
    
    # Step 2: Load JSON data
    try:
        with open(json_file, 'r') as f:
            json_data = json.load(f)
        print("‚úÖ JSON data loaded successfully")
    except Exception as e:
        print(f"‚ùå Error loading JSON: {e}")
        sys.exit(1)
    
    # Step 3: Send to Ollama
    html_content = send_to_ollama(json_data, args.model, args.ollama_url)
    if not html_content:
        sys.exit(1)
    
    # Step 4: Save HTML report
    if not save_html_report(html_content, html_file):
        sys.exit(1)
    
    # Step 5: Open report
    if not args.no_open:
        open_report(html_file)
    
    print("\nüéâ Report generation completed successfully!")
    print(f"üìÑ JSON Report: {json_file}")
    print(f"üåê HTML Report: {html_file}")

if __name__ == "__main__":
    main()
